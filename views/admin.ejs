<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <title>Dashboard Jadwal Pegawai</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png">
  <link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png">
  <style>
    body { font-family: Arial, sans-serif; margin: 0; }
    .navbar { 
      background: #007BFF; 
      color: #fff; 
      padding: 10px 20px; 
      display: flex; 
      justify-content: space-between; /* Membuat item terpisah */
      align-items: center; 
    }
    .container { padding: 20px; }
    table { border-collapse: collapse; font-size: 14px; width: 100%; }
    th, td { border: 1px solid #ccc; padding: 6px 10px; text-align: center; }
    th { background: #eee; position: sticky; top: 0; z-index: 1; }
    .left-table-wrapper, .right-table-wrapper { max-height: 500px; overflow: auto; }
    select, button { margin: 10px 5px; padding: 6px 12px; border-radius: 4px; cursor: pointer; border: none; font-weight: bold; }
    select { background: #fff; color: #000; border: 1px solid #ccc; font-weight: normal; }
    button { background: #28a745; color: #fff; }
    #message { margin-top: 10px; font-weight: bold; }
    #message.success { color: #28a745; }
    #message.fail { color: #dc3545; }
    
    .demand-table-container { 
      max-width: 600px;
      max-height: 300px;
      overflow: auto;
      margin-top: 25px; 
    }
    #demand-table select { margin: 2px; padding: 4px; }
    #demand-table td { vertical-align: middle; }
    
    #holiday-table { 
      width: 100%; 
      border-collapse: collapse; 
      font-size: 14px; 
    }
    #holiday-table th, #holiday-table td { 
      border: 1px solid #ccc; 
      padding: 8px; 
      text-align: left; 
    }
    #holiday-table th { 
      background: #eee; 
      font-weight: bold; 
    }
    #newHolidayDate, #newHolidayName { 
      border: 1px solid #ccc; 
      border-radius: 4px; 
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 10% auto;
      padding: 30px;
      border: 1px solid #888;
      border-radius: 8px;
      width: 500px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .modal-header {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 15px;
    }
    
    .modal-body {
      margin-bottom: 20px;
      color: #333;
    }
    
    .modal-footer {
      display: flex;
      justify-content: center;
      gap: 10px;
    }
    
    .modal-btn {
      padding: 8px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .modal-btn-primary { background-color: #007bff; color: white; }
    .modal-btn-danger { background-color: #dc3545; color: white; }
    .modal-btn-success { background-color: #28a745; color: white; }
    .modal-btn:hover { opacity: 0.8; }

    /* PERUBAHAN: Style untuk Logout Dropdown */
    .navbar-right a {
      color: white;
      text-decoration: none;
      cursor: pointer;
    }
    .navbar-right a:hover {
      text-decoration: underline;
    }
    .navbar-right i {
      margin-right: 5px;
    }

    /* PERUBAHAN: Style untuk Container Chart */
    .chart-container {
      display: flex;
      gap: 20px;
      margin-top: 25px;
      width: 100%;
    }
    .chart-wrapper {
      flex: 1;
      border: 1px solid #ccc;
      padding: 15px;
      border-radius: 8px;
    }

  </style>
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>
  <div class="navbar">
    <div>Dashboard Admin</div>
    <div class="navbar-right">
      <a id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </div>
  <div class="container">
    <div>
      <label for="bulan">Bulan: </label>
      <select id="bulan" onchange="handleBulanChange()">
        <option value="1">Januari</option><option value="2">Februari</option><option value="3">Maret</option>
        <option value="4">April</option><option value="5">Mei</option><option value="6">Juni</option>
        <option value="7">Juli</option><option value="8">Agustus</option><option value="9" selected>September</option>
        <option value="10">Oktober</option><option value="11">November</option><option value="12">Desember</option>
      </select>
      
      <label style="margin-left: 15px; font-weight: normal; cursor: pointer;">
        <input type="checkbox" id="check-all" onchange="toggleAllChecks(this)" style="vertical-align: middle;">
        Centang Semua Action
      </label>
      <span id="message"></span>
    </div>
    <div style="display:flex; gap:20px; margin-top:15px;">
      <div class="left-table-wrapper">
        <table id="left-table">
          <thead>
            <tr>
              <th>NIP</th>
              <th>Nama</th>
              <th>Jenis</th>
              <th>Request</th>
              <th>Status</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="left-body"></tbody>
        </table>
      </div>
      <div class="right-table-wrapper">
        <table id="right-table">
          <thead id="right-head"></thead>
          <tbody id="right-body"></tbody>
        </table>
      </div>
    </div>


    <div style="display:flex; gap:20px; margin-top:15px;">
      <div class="demand-table-container" style="flex: 1;">
        <h3 style="margin-bottom: 10px;">Tanggal Merah & Libur Bersama</h3>
        <div style="margin-bottom: 10px;">
          <input type="date" id="newHolidayDate" style="margin-right: 10px; padding: 6px;">
          <button onclick="addHoliday()" style="background:#28a745;">Tambah</button>
        </div>
        <table id="holiday-table">
          <thead>
            <tr>
              <th>Tanggal</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="holiday-body"></tbody>
        </table>
      </div>

      <div class="demand-table-container" style="flex: 1;">
        <h3 style="margin-bottom: 10px;">Konfigurasi Demand Shift</h3>
        <table id="demand-table">
          <thead>
            <tr>
              <th>Shift</th>
              <th>Weekday</th>
              <th>Sabtu</th>
              <th>Minggu</th>
            </tr>
          </thead>
          <tbody id="demand-body"></tbody>
        </table>
      </div>
    </div>
    <div class="chart-container">
      <div class="chart-wrapper" id="requestChartContainer"></div>
      <div class="chart-wrapper" id="shiftChartContainer"></div>
    </div>
    
    <div style="margin-top:15px;">
      <button onclick="generateJadwal()">Generate Jadwal</button>
      <button onclick="downloadExcel()" style="background:#6c757d;">Download Excel</button>
      <button onclick="resetPengajuan()" style="background:#dc3545;">Reset Pengajuan</button>
      <button id="undoResetBtn" onclick="undoReset()" style="background:#ffc107; color:#000; display:none;">Undo Reset</button>
      <button onclick="downloadRequestExcel()" style="background:#17a2b8;">Download Request</button>
    </div>
  </div>

  <div id="notificationModal" class="modal">
    <div class="modal-content">
      <div class="modal-header" id="modalHeader">Notifikasi</div>
      <div class="modal-body" id="modalBody">Pesan akan muncul di sini</div>
      <div class="modal-footer">
        <button class="modal-btn modal-btn-primary" onclick="closeModal()">OK</button>
      </div>
    </div>
  </div>

  <div id="confirmModal" class="modal">
    <div class="modal-content">
      <div class="modal-header" id="confirmHeader">Konfirmasi</div>
      <div class="modal-body" id="confirmBody">Apakah Anda yakin?</div>
      <div class="modal-footer">
        <button class="modal-btn modal-btn-danger" onclick="confirmAction()">Ya</button>
        <button class="modal-btn modal-btn-primary" onclick="cancelAction()">Tidak</button>
      </div>
    </div>
  </div>

  <script>
    let pegawaiTetap = [], dataPengajuan = [], pegawaiMap = {};
    let scheduleList = [];

    const scheduleColorMap = {
      'P6': '#FFF9C4', 'P7': '#FFF9C4', 'P8': '#FFF9C4', 'P9': '#FFF9C4',
      'P10': '#FFFF00', 'P11': '#FFECB3', 'S12': '#C8E6C9', 'SOCM': '#B2DFDB',
      'SOC2': '#B2DFDB', 'SOC6': '#B2DFDB', 'Libur': '#FFCDD2', 'Cuti': '#D1C4E9', 'M': '#E0E0E0',
    };

    const initialDemand = {
        'P6': {'Weekday': [2, 2], 'Sabtu': [2, 2], 'Minggu': [2, 2]},
        'P7': {'Weekday': [3, 3], 'Sabtu': [2, 2], 'Minggu': [1, 1]},
        'P8': {'Weekday': [3, 5], 'Sabtu': [2, 2], 'Minggu': [1, 1]},
        'P9': {'Weekday': [2, 4], 'Sabtu': [2, 2], 'Minggu': [1, 1]},
        'P10': {'Weekday': [2, 4], 'Sabtu': [0, 0], 'Minggu': [0, 0]},
        'P11': {'Weekday': [1, 1], 'Sabtu': [1, 1], 'Minggu': [1, 1]},
        'S12': {'Weekday': [4, 4], 'Sabtu': [3, 3], 'Minggu': [3, 3]},
        'M': {'Weekday': [2, 2], 'Sabtu': [2, 2], 'Minggu': [2, 2]},
        'SOCM': {'Weekday': [1, 1], 'Sabtu': [1, 1], 'Minggu': [1, 1]},
        'SOC2': {'Weekday': [1, 1], 'Sabtu': [1, 1], 'Minggu': [1, 1]},
        'SOC6': {'Weekday': [1, 1], 'Sabtu': [1, 1], 'Minggu': [1, 1]}
    };

    function daysInMonth(month, year) { return new Date(year, month, 0).getDate(); }
    function getTanggalBulan(bulan) {
      const yr = new Date().getFullYear();
      return Array.from({ length: daysInMonth(bulan, yr) }, (_, i) => `${String(i+1).padStart(2,'0')}-${String(bulan).padStart(2,'0')}-${yr}`);
    }

    function loadPegawai() {
      console.log('Loading pegawai data from database...');
      
      fetch('/api/pegawai')
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error('Error loading pegawai:', data.error);
            alert('Gagal memuat data pegawai: ' + data.error);
            return;
          }
          
          pegawaiTetap = Array.isArray(data) ? data : [];
          pegawaiTetap.forEach(p => pegawaiMap[p.NIP] = p.Nama);
          renderRightTable();
          fetchPengajuan();
        })
        .catch(error => {
          console.error('Error fetching pegawai data:', error);
          alert('Gagal memuat data pegawai. Silakan refresh halaman.');
        });
    }
    function fetchPengajuan() {
      console.log('Loading pengajuan data from database...');
      
      fetch('/api/pengajuan')
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error('Error loading pengajuan:', data.error);
            alert('Gagal memuat data pengajuan: ' + data.error);
            return;
          }
          
          dataPengajuan = Array.isArray(data) ? data : [];
          renderLeftTable();
          markSelectedDates();
          // PERUBAHAN 4: Memanggil fungsi untuk menggambar chart pengajuan
          drawRequestChart();
        })
        .catch(error => {
          console.error('Error fetching pengajuan data:', error);
          alert('Gagal memuat data pengajuan. Silakan refresh halaman.');
        });
    }
    function renderLeftTable() {
      const tbody = document.getElementById('left-body');
      tbody.innerHTML = '';
      if (!dataPengajuan.length) {
        tbody.innerHTML = '<tr><td colspan="6">Tidak ada data pengajuan</td></tr>'; return;
      }
      dataPengajuan.forEach((p,i) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${p.nip}</td><td>${p.nama}</td><td>${p.jenis}</td><td>${p.request.join(', ')}</td><td>${p.status}</td><td><input type="checkbox" class="pengajuan-check" data-idx="${i}"></td>`;
        tbody.appendChild(tr);
      });
    }
    function renderRightTable() {
      const month = +document.getElementById('bulan').value;
      const days = getTanggalBulan(month);
      const thead = document.getElementById('right-head');
      const tbody = document.getElementById('right-body');
      thead.innerHTML = `<tr><th>NIP</th><th>Nama</th>` + days.map(d => `<th>${parseInt(d.split('-')[0],10)}</th>`).join('') + `</tr>`;
      tbody.innerHTML = '';
      pegawaiTetap.forEach(p => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${p.NIP}</td><td>${p.Nama}</td>` + days.map(d => `<td data-nip="${p.NIP}" data-tgl="${d}"></td>`).join('');
        tbody.appendChild(tr);
      });
      markSelectedDates();
    }
    function markSelectedDates() {
      document.querySelectorAll('#right-body td[data-tgl]').forEach(td => {
        td.textContent = ''; td.style.backgroundColor = '';
      });
      document.querySelectorAll('.pengajuan-check:checked').forEach(ch => {
        const p = dataPengajuan[+ch.dataset.idx];
        const isLibur = p.jenis.toLowerCase() === 'libur';
        const sym = isLibur ? 'LR' : 'C';
        const bg = isLibur ? scheduleColorMap['Libur'] : scheduleColorMap['Cuti'];
        p.request.forEach(tgl => {
          const cell = document.querySelector(`td[data-nip="${p.nip}"][data-tgl="${tgl}"]`);
          if (cell) { cell.textContent = sym; cell.style.backgroundColor = bg; }
        });
      });
    }
    document.getElementById('left-body').addEventListener('click', e => {
      if (e.target.matches('.pengajuan-check')) markSelectedDates();
    });
    function handleBulanChange() {
      renderRightTable();
      fetchPengajuan();
    }
    function toggleAllChecks(masterCheckbox) {
      const isChecked = masterCheckbox.checked;
      document.querySelectorAll('.pengajuan-check').forEach(checkbox => { checkbox.checked = isChecked; });
      markSelectedDates();
    }
    
    function renderDemandTable() {
      const tbody = document.getElementById('demand-body');
      tbody.innerHTML = '';

      const createDropdown = (selectedValue, max = 10) => {
          let options = '';
          for (let i = 0; i <= max; i++) {
              options += `<option value="${i}" ${i === selectedValue ? 'selected' : ''}>${i}</option>`;
          }
          return `<select>${options}</select>`;
      };

      for (const shift in initialDemand) {
          const tr = document.createElement('tr');
          tr.setAttribute('data-shift', shift);
          let cells = `<td>${shift}</td>`;
          
          for (const dayType of ['Weekday', 'Sabtu', 'Minggu']) {
              const value = initialDemand[shift][dayType];
              cells += '<td>';
              cells += createDropdown(value[0]);
              cells += ' - ';
              cells += createDropdown(value[1]);
              cells += '</td>';
          }
          tr.innerHTML = cells;
          tbody.appendChild(tr);
      }
    }

    function getDemandDataFromTable() {
      const demandData = {};
      const rows = document.querySelectorAll('#demand-body tr');

      rows.forEach(row => {
          const shift = row.dataset.shift;
          demandData[shift] = {};
          const cells = row.querySelectorAll('td');
          
          ['Weekday', 'Sabtu', 'Minggu'].forEach((dayType, i) => {
              const cell = cells[i + 1];
              const dropdowns = cell.querySelectorAll('select');
              demandData[shift][dayType] = [
                  parseInt(dropdowns[0].value, 10),
                  parseInt(dropdowns[1].value, 10)
              ];
          });
      });
      return demandData;
    }

        function generateJadwal() {
        const month = +document.getElementById('bulan').value;
        const year = new Date().getFullYear();
        const requests = [];
        document.querySelectorAll('.pengajuan-check:checked').forEach(ch => {
            const p = dataPengajuan[+ch.dataset.idx];
            p.request.forEach(tgl => {
                const [dd, mm, yyyy] = tgl.split('-');
                requests.push({ nip: Number(p.nip), jenis: p.jenis, tanggal: `${yyyy}-${mm}-${dd}` });
            });
        });

        if (!requests.length) {
            return alert('Pilih minimal satu pengajuan sebelum generate.');
        }
        
        const demandConfig = getDemandDataFromTable();

        alert('Mengambil data tanggal merah dan memulai proses generate...');

        fetch('/api/tanggal-merah')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Gagal mengambil data tanggal merah dari server.');
                }
                return response.json();
            })
            .then(holidaysFromServer => {
                const holidays = holidaysFromServer.map(h => h.tanggal.split('T')[0]);

                const payload = {
                    year,
                    month,
                    requests,
                    public_holidays: holidays,
                    demand: demandConfig
                };
                
                console.log("Payload yang dikirim ke API generate-schedule:", JSON.stringify(payload, null, 2));


                return fetch('http://localhost:5001/generate-schedule', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
            })
            .then(res => {
                if (!res.ok) {
                    return res.json().then(errData => {
                        throw new Error(errData.message || res.statusText);
                    });
                }
                return res.json();
            })
            .then(data => {
                alert(data.message || 'Proses pembuatan jadwal dimulai.');
                if (data.status_check_url) {
                    pollStatus(data.status_check_url);
                }
            })
            .catch(err => {
                console.error(err);
                alert('Terjadi kesalahan: ' + err.message);
            });
    }

    function pollStatus(checkUrl) {
      const interval = 10000, maxTries = 60; let tries = 0;
      const msgEl = document.getElementById('message');
      msgEl.textContent = 'Sedang memproses jadwal…';
      const timer = setInterval(() => {
        tries++;
        fetch(checkUrl)
          .then(res => { if (!res.ok) throw new Error(res.statusText); return res.json(); })
          .then(json => {
            console.log(json);
            if (json.state === 'SUCCESS' && Array.isArray(json.result) && json.result.length > 0) {
              clearInterval(timer);
              msgEl.textContent = `✅ Jadwal siap setelah ${tries} percobaan.`;
              msgEl.className = 'success';
              scheduleList = json.result.map(e => e.result);
              applyScheduleToMainTable(scheduleList[0].schedule);
            } else if (json.state === 'NO_SOLUTION') {
                clearInterval(timer); 
                msgEl.textContent = '❌ Proses selesai, namun tidak ada jadwal yang ditemukan.'; 
                msgEl.className = 'fail';
            } else if (tries >= maxTries) {
              clearInterval(timer); 
              msgEl.textContent = '❌ Batas polling terlampaui.'; 
              msgEl.className = 'fail';
            }
          })
          .catch(() => {
            if (tries >= maxTries) {
              clearInterval(timer); 
              msgEl.textContent = '❌ Polling gagal.'; 
              msgEl.className = 'fail';
            }
          });
      }, interval);
    }
    
    function applyScheduleToMainTable(scheduleData) {
      document.querySelectorAll('.auto-shift').forEach(c => {
        c.textContent = ''; c.style.backgroundColor = ''; c.classList.remove('auto-shift');
      });
      markSelectedDates();
      const month = String(document.getElementById('bulan').value).padStart(2, '0');
      const year = new Date().getFullYear();
      Object.entries(scheduleData).forEach(([nip, shifts]) => {
        shifts.forEach((shift, idx) => {
          const day = String(idx + 1).padStart(2, '0');
          const ddmmy = `${day}-${month}-${year}`;
          const cell = document.querySelector(`td[data-nip="${nip}"][data-tgl="${ddmmy}"]`);
          if (cell && !cell.textContent) {
            let display;
            if (shift.toLowerCase() === 'libur') {
              display = 'L';
            } else if (shift.toLowerCase() === 'cuti') {
              display = 'C';
            } else {
              display = shift;
            }
            cell.textContent = display;
            cell.classList.add('auto-shift');
            const color = scheduleColorMap[shift];
            if (color) { cell.style.backgroundColor = color; } 
            else if (shift && shift !== '-') { cell.style.backgroundColor = '#e8f0fe'; }
          }
        });
      });
      // PERUBAHAN 5: Panggil fungsi untuk menggambar chart distribusi shift
      drawShiftChart(scheduleData);
    }

    function downloadExcel() {
      const tbl = document.getElementById('right-table');
      if (!tbl) return alert('Tabel jadwal tidak ditemukan.');
      const header = Array.from(tbl.querySelectorAll('thead tr th')).map(th => th.textContent.trim());
      const bodyRows = Array.from(tbl.querySelectorAll('tbody tr'));
      const sheetData = [header];
      bodyRows.forEach(tr => {
        const rowData = Array.from(tr.querySelectorAll('td')).map(td => {
          const cellValue = td.textContent.trim();
          const cellObject = { v: cellValue, t: 's' };
          
          let colorKey = cellValue;
          if (cellValue === 'LR' || cellValue === 'L') {
              colorKey = 'Libur';
          } else if (cellValue === 'C') {
              colorKey = 'Cuti';
          }
          
          const colorHex = scheduleColorMap[colorKey];
          if (colorHex) {
            cellObject.s = { fill: { patternType: "solid", fgColor: { rgb: colorHex.replace('#', '') } } };
          }
          return cellObject;
        });
        sheetData.push(rowData);
      });
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(sheetData);
      const colWidths = header.map((_, i) => ({
        wch: Math.max(...sheetData.map(row => row[i] ? String(row[i].v).length : 0), header[i].length) + 2
      }));
      ws['!cols'] = colWidths;
      const monthName = document.getElementById('bulan').options[document.getElementById('bulan').selectedIndex].text;
      const year = new Date().getFullYear();
      XLSX.utils.book_append_sheet(wb, ws, 'Jadwal');
      XLSX.writeFile(wb, `Jadwal ${monthName} ${year}.xlsx`);
    }

    // Reset, Undo, Download Request, dan Holiday functions tetap sama
    let pendingAction = null;
    let lastResetBackup = null;

    function resetPengajuan() {
      showConfirmModal(
        'Konfirmasi Reset', 
        'Apakah Anda yakin ingin mereset pengajuan? Jatah cuti CAP dan libur akan dikembalikan ke full, tapi cuti tahunan tidak akan berubah.',
        () => {
          fetch('/api/reset-pengajuan', { method: 'POST' })
          .then(res => res.ok ? res.json() : Promise.reject(res))
          .then(data => {
            if (data.success) {
              lastResetBackup = data.backupData;
              showModal('Berhasil', data.message + ' (Undo tersedia)');
              fetchPengajuan();
              updateUndoButton();
            } else {
              showModal('Error', 'Gagal reset pengajuan: ' + data.error);
            }
          }).catch(err => showModal('Error', 'Server error: ' + err.message));
        }
      );
    }

    function undoReset() {
      if (!lastResetBackup) return showModal('Peringatan', 'Tidak ada data backup untuk di-undo.');
      showConfirmModal(
        'Konfirmasi Undo', 
        'Apakah Anda yakin ingin mengembalikan pengajuan yang telah direset?',
        () => {
          fetch('/api/undo-reset-pengajuan', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ backupData: lastResetBackup })
          })
          .then(res => res.ok ? res.json() : Promise.reject(res))
          .then(data => {
            if (data.success) {
              showModal('Berhasil', data.message);
              fetchPengajuan();
              lastResetBackup = null;
              updateUndoButton();
            } else {
              showModal('Error', 'Gagal undo reset: ' + data.error);
            }
          }).catch(err => showModal('Error', 'Server error: ' + err.message));
        }
      );
    }
    
    function updateUndoButton() {
      document.getElementById('undoResetBtn').style.display = lastResetBackup ? 'inline-block' : 'none';
    }

    function downloadRequestExcel() {
      if (!dataPengajuan.length) return alert('Tidak ada data pengajuan untuk didownload.');
      const sheetData = [['NIP', 'Nama', 'Jenis', 'Tanggal Request', 'Status'], ...dataPengajuan.map(p => [p.nip, p.nama, p.jenis, p.request.join(', '), p.status])];
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(sheetData);
      ws['!cols'] = [{ wch: 15 }, { wch: 25 }, { wch: 15 }, { wch: 30 }, { wch: 15 }];
      const monthName = document.getElementById('bulan').options[document.getElementById('bulan').selectedIndex].text;
      const year = new Date().getFullYear();
      XLSX.utils.book_append_sheet(wb, ws, 'Request Pengajuan');
      XLSX.writeFile(wb, `Request Pengajuan ${monthName} ${year}.xlsx`);
    }

    let holidayData = [];

    function showModal(title, message) {
      document.getElementById('modalHeader').textContent = title;
      document.getElementById('modalBody').textContent = message;
      document.getElementById('notificationModal').style.display = 'block';
    }

    function closeModal() {
      document.getElementById('notificationModal').style.display = 'none';
    }

    function showConfirmModal(title, message, action) {
      document.getElementById('confirmHeader').textContent = title;
      document.getElementById('confirmBody').textContent = message;
      pendingAction = action;
      document.getElementById('confirmModal').style.display = 'block';
    }

    function confirmAction() {
      if (pendingAction) pendingAction();
      pendingAction = null;
      document.getElementById('confirmModal').style.display = 'none';
    }

    function cancelAction() {
      pendingAction = null;
      document.getElementById('confirmModal').style.display = 'none';
    }

    window.onclick = function(event) {
      if (event.target == document.getElementById('notificationModal')) closeModal();
      if (event.target == document.getElementById('confirmModal')) cancelAction();
    }

    function loadHolidays() {
      fetch('/api/tanggal-merah')
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(data => {
        holidayData = Array.isArray(data) ? data : [];
        renderHolidayTable();
      }).catch(err => showModal('Error', 'Gagal memuat tanggal merah: ' + err.message));
    }

    function renderHolidayTable() {
      const tbody = document.getElementById('holiday-body');
      tbody.innerHTML = '';
      if (!holidayData.length) {
        tbody.innerHTML = '<tr><td colspan="2">Tidak ada tanggal merah</td></tr>';
        return;
      }
      holidayData.forEach((holiday, index) => {
        const tr = document.createElement('tr');
        const date = new Date(holiday.tanggal);
        const formattedDate = date.toLocaleDateString('id-ID', { day: '2-digit', month: '2-digit', year: 'numeric' });
        tr.innerHTML = `<td>${formattedDate}</td><td><button onclick="deleteHoliday(${index})" style="background:#dc3545; padding: 4px 8px; font-size: 12px;">Hapus</button></td>`;
        tbody.appendChild(tr);
      });
    }

    function addHoliday() {
      const dateInput = document.getElementById('newHolidayDate').value;
      if (!dateInput) return showModal('Peringatan', 'Mohon isi tanggal hari libur.');
      if (holidayData.some(h => h.tanggal.startsWith(dateInput))) return showModal('Peringatan', 'Tanggal ini sudah ada.');
      
      fetch('/api/tanggal-merah', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ tanggal: dateInput })
      })
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(data => {
        if(data.success) {
          showModal('Berhasil', 'Tanggal merah berhasil ditambahkan.');
          document.getElementById('newHolidayDate').value = '';
          loadHolidays();
        } else {
          showModal('Error', 'Gagal menambahkan: ' + data.error);
        }
      }).catch(err => showModal('Error', 'Server error: ' + err.message));
    }

    function deleteHoliday(index) {
      const holiday = holidayData[index];
      let dbDate = holiday.tanggal.split('T')[0];
      const displayDate = new Date(dbDate).toLocaleDateString('id-ID', { day: '2-digit', month: '2-digit', year: 'numeric' });
      showConfirmModal('Konfirmasi Hapus', `Hapus tanggal merah pada ${displayDate}?`, () => {
        fetch('/api/tanggal-merah', {
          method: 'DELETE',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ tanggal: dbDate })
        })
        .then(res => res.ok ? res.json() : Promise.reject(res))
        .then(data => {
          if (data.success) {
            showModal('Berhasil', 'Tanggal merah berhasil dihapus.');
            loadHolidays();
          } else {
            showModal('Error', 'Gagal menghapus: ' + data.error);
          }
        }).catch(err => showModal('Error', 'Server error: ' + err.message));
      });
    }

    // PERUBAHAN 6: Fungsi-fungsi untuk menggambar chart
    google.charts.load('current', {'packages':['corechart', 'line']});
    google.charts.setOnLoadCallback(drawRequestChart); // Gambar chart pengajuan saat library siap

    function drawRequestChart() {
        if (dataPengajuan.length === 0) {
            document.getElementById('requestChartContainer').innerHTML = '<h3>Frekuensi Pengajuan per Tanggal</h3><p>Tidak ada data pengajuan untuk ditampilkan.</p>';
            return;
        }

        const dateCounts = {};
        dataPengajuan.forEach(p => {
            p.request.forEach(dateStr => {
                const [day, month, year] = dateStr.split('-');
                const formattedDate = `${year}-${month}-${day}`; // Format YYYY-MM-DD untuk sorting
                dateCounts[formattedDate] = (dateCounts[formattedDate] || 0) + 1;
            });
        });

        const sortedDates = Object.entries(dateCounts).sort((a, b) => new Date(a[0]) - new Date(b[0]));
        
        const data = new google.visualization.DataTable();
        data.addColumn('string', 'Tanggal');
        data.addColumn('number', 'Jumlah Pengajuan');
        data.addRows(sortedDates.map(([date, count]) => {
            const [year, month, day] = date.split('-');
            return [`${day}-${month}`, count]; // Format DD-MM untuk label
        }));

        const options = {
            title: 'Frekuensi Pengajuan per Tanggal',
            legend: { position: 'none' },
            hAxis: { title: 'Tanggal' },
            vAxis: { title: 'Jumlah Pengajuan', viewWindow: { min: 0 } },
            colors: ['#007BFF']
        };

        const chart = new google.visualization.LineChart(document.getElementById('requestChartContainer'));
        chart.draw(data, options);
    }

    function drawShiftChart(scheduleData) {
        if (!scheduleData || Object.keys(scheduleData).length === 0) {
            document.getElementById('shiftChartContainer').innerHTML = '<h3>Distribusi Shift Hasil Generate</h3><p>Belum ada jadwal yang digenerate.</p>';
            return;
        }

        const shiftCounts = {};
        const ignoredShifts = ['Libur', 'Cuti', 'LR', 'L', 'C', '-'];
        Object.values(scheduleData).forEach(shifts => {
            shifts.forEach(shift => {
                if (!ignoredShifts.includes(shift)) {
                    shiftCounts[shift] = (shiftCounts[shift] || 0) + 1;
                }
            });
        });

        const data = new google.visualization.DataTable();
        data.addColumn('string', 'Shift');
        data.addColumn('number', 'Jumlah');
        data.addRows(Object.entries(shiftCounts));

        const options = {
            title: 'Distribusi Shift Hasil Generate',
            is3D: true,
        };

        const chart = new google.visualization.PieChart(document.getElementById('shiftChartContainer'));
        chart.draw(data, options);
    }

    document.addEventListener('DOMContentLoaded', () => {
      loadPegawai();
      renderDemandTable();
      loadHolidays();
      drawShiftChart(null); // Tampilkan chart kosong di awal

      // PERUBAHAN 7: Event Listener untuk Logout
      document.getElementById('logoutBtn').addEventListener('click', () => {
        showConfirmModal('Konfirmasi Logout', 'Apakah Anda yakin ingin keluar?', () => {
          window.location.href = '/logout';
        });
      });
    });
  </script>
</body>
</html>